/* The following code was generated by JFlex 1.6.0 */

package edu.borzhch.language;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>borzhch.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_DQUOTED = 2;
  public static final int STRING_SQUOTED = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\41\1\61"+
    "\3\0\1\45\1\62\1\55\1\56\1\5\1\43\1\51\1\44\1\15"+
    "\1\4\1\13\11\14\1\10\1\52\1\42\1\40\1\42\2\0\32\7"+
    "\1\57\1\63\1\60\1\47\1\6\1\0\1\23\1\32\1\34\1\12"+
    "\1\21\1\22\1\31\1\36\1\26\1\11\1\37\1\24\1\11\1\27"+
    "\1\30\1\33\1\11\1\17\1\25\1\16\1\20\1\11\1\35\1\50"+
    "\2\11\1\53\1\46\1\54\54\0\1\11\12\0\1\11\4\0\1\11"+
    "\5\0\27\7\1\0\7\7\30\11\1\0\10\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\2\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7"+
    "\3\11\2\7\1\11\1\7\1\11\2\7\1\11\3\7\2\11\4\7"+
    "\1\11\2\7\1\11\3\7\3\11\2\7\1\11\2\7\1\11\1\7"+
    "\1\11\1\7\1\11\2\7\1\11\1\7\2\11\1\7\1\11\2\7"+
    "\1\11\3\7\1\11\1\7\1\11\2\7\2\11\1\0\1\7\3\11"+
    "\4\0\1\7\1\0\1\11\1\7\1\0\1\11\1\7\1\0\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\2\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\2\11\1\7\1\0\1\11\1\7\1\11\3\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\7\11\2\7"+
    "\1\11\2\7\2\11\1\7\1\11\4\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\105\11\1\0\44\11\7\0\2\11\36\0"+
    "\5\11\140\0\1\11\52\0\1\7\1\11\1\7\1\11\2\0\1\7"+
    "\1\11\2\0\4\11\1\0\1\7\6\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\11\21\7\1\0\11\7\43\11\1\7\2\11"+
    "\3\7\3\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\5\11\1\7\1\11\1\0\1\7"+
    "\1\11\2\7\2\11\63\7\60\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\10\0"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\0\46\7\12\0\47\11\u0b18\0\46\7"+
    "\1\0\1\7\5\0\1\7\u0c32\0\300\11\100\0\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\11\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\11\11\10\7\6\11\2\0\6\7\2\0"+
    "\10\11\10\7\10\11\10\7\6\11\2\0\6\7\2\0\10\11\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\10\11\10\7\16\11"+
    "\2\0\10\11\10\0\10\11\10\0\10\11\10\0\5\11\1\0\2\11"+
    "\4\7\2\0\1\11\3\0\3\11\1\0\2\11\4\7\4\0\4\11"+
    "\2\0\2\11\4\7\4\0\10\11\5\7\5\0\3\11\1\0\2\11"+
    "\4\7\165\0\1\11\15\0\1\11\20\0\15\11\145\0\1\7\4\0"+
    "\1\7\2\0\1\11\3\7\2\11\3\7\1\11\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\11\4\7\1\11\4\0\1\11\2\0\2\11\2\7\5\0\1\7"+
    "\4\11\4\0\1\11\21\0\20\7\20\11\3\0\1\7\1\11\u0331\0"+
    "\32\7\32\11\u0716\0\57\7\1\0\57\11\1\0\1\7\1\11\3\7"+
    "\2\11\1\7\1\11\1\7\1\11\1\7\1\11\4\7\1\11\1\7"+
    "\2\11\1\7\10\11\3\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\2\11\6\0\1\7\1\11\1\7\1\11\3\0\1\7"+
    "\1\11\14\0\46\11\1\0\1\11\5\0\1\11\u7912\0\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\22\0\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\3\11\204\0\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\3\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\12\11"+
    "\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\3\0\1\7\1\11\1\7\1\11\1\0"+
    "\1\7\1\11\1\7\3\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\4\7\2\0\2\7\106\0\3\11\u0335\0"+
    "\53\11\1\0\4\11\4\0\2\11\u4f9a\0\7\11\14\0\5\11\u0409\0"+
    "\32\7\6\0\32\11\u04a5\0\50\7\50\11\u1450\0\40\7\40\11\ubb20\0"+
    "\32\7\32\11\32\7\7\11\1\0\22\11\32\7\32\11\1\7\1\0"+
    "\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\10\7\4\11"+
    "\1\0\1\11\1\0\7\11\1\0\13\11\32\7\32\11\2\7\1\0"+
    "\4\7\2\0\10\7\1\0\7\7\1\0\32\11\2\7\1\0\4\7"+
    "\1\0\5\7\1\0\1\7\3\0\7\7\1\0\32\11\32\7\32\11"+
    "\32\7\32\11\32\7\32\11\32\7\32\11\32\7\32\11\32\7\34\11"+
    "\2\0\31\7\1\0\31\11\1\0\6\11\31\7\1\0\31\11\1\0"+
    "\6\11\31\7\1\0\31\11\1\0\6\11\31\7\1\0\31\11\1\0"+
    "\6\11\31\7\1\0\31\11\1\0\6\11\1\7\1\11\u1964\0\32\7"+
    "\6\0\32\7\6\0\32\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u0e85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\1\1\4\2\5\2\6"+
    "\1\7\15\5\1\10\1\11\1\12\2\13\2\1\1\14"+
    "\1\5\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\27\1\31"+
    "\1\2\1\0\1\32\1\5\1\33\1\0\1\34\1\5"+
    "\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\35"+
    "\2\0\1\36\1\0\1\5\4\0\1\37\1\12\1\40"+
    "\1\41\1\36\1\0\1\42\1\43\1\44\1\45\1\46"+
    "\5\0\1\5\3\0\1\47\1\5\1\0\1\6\1\0"+
    "\1\11\1\0\1\5\6\0\1\50\2\0\1\51\2\0"+
    "\1\5\2\0\1\52\1\0\1\53\2\0\1\54\1\55"+
    "\1\0\1\34\4\0\1\56\1\0\1\57\1\60\1\61"+
    "\1\62\1\63\2\0\1\64\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\234\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\234\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\234\0\u0680\0\234\0\234\0\234"+
    "\0\234\0\234\0\234\0\234\0\234\0\234\0\234\0\u06b4"+
    "\0\234\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\234\0\u07ec"+
    "\0\234\0\u023c\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\234\0\u0a5c\0\u0a90"+
    "\0\u01d4\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\234"+
    "\0\234\0\234\0\234\0\234\0\u0bfc\0\234\0\234\0\234"+
    "\0\234\0\234\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\234\0\u0e04\0\u0e38\0\234\0\u0e6c"+
    "\0\234\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\234\0\u1040\0\u1074\0\234\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\234\0\u11ac\0\234\0\u11e0\0\u1214\0\234"+
    "\0\234\0\u1248\0\234\0\u127c\0\u12b0\0\u12e4\0\u1318\0\234"+
    "\0\u134c\0\234\0\234\0\234\0\234\0\234\0\u1380\0\u13b4"+
    "\0\234\0\u13e8\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\13"+
    "\1\22\1\23\1\24\1\13\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\13\1\33\1\34\2\13\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\4\1\60\2\4\56\60\1\61\1\60\1\62"+
    "\1\63\2\4\57\63\1\61\1\64\66\0\1\6\65\0"+
    "\1\65\1\66\63\0\1\67\65\0\1\12\1\0\2\13"+
    "\3\0\22\13\10\0\1\13\23\0\1\12\1\0\1\12"+
    "\3\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12"+
    "\2\0\1\12\42\0\1\13\1\0\1\13\3\0\2\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\2\0\1\13"+
    "\42\0\1\13\1\0\1\13\3\0\2\13\1\0\1\70"+
    "\2\0\1\13\1\0\1\13\1\0\1\71\1\13\45\0"+
    "\2\72\1\73\61\0\2\16\1\73\56\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\74\1\75\1\13\2\0\1\13"+
    "\1\0\1\13\2\0\1\13\42\0\1\13\1\0\1\13"+
    "\3\0\2\13\1\0\1\76\2\0\1\13\1\0\1\13"+
    "\2\0\1\13\42\0\1\13\1\0\1\13\3\0\2\13"+
    "\1\0\1\13\2\0\1\77\1\0\1\13\2\0\1\13"+
    "\42\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\1\0\1\100\1\101\1\0\1\13\1\0\1\102\1\13"+
    "\42\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\103\1\0\1\13\42\0"+
    "\1\13\1\0\1\13\3\0\1\104\1\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\2\0\1\13\3\0\1\105"+
    "\36\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\1\106\1\0\1\13\1\0\1\13\1\107\1\0\1\13"+
    "\42\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\0\1\110\1\13\42\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\111\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\2\0\1\13\42\0\1\13"+
    "\1\0\1\13\3\0\2\13\1\0\1\13\2\0\1\13"+
    "\1\0\1\13\1\0\1\112\1\13\42\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\113\1\0\1\13\2\0\1\13"+
    "\1\0\1\13\1\0\1\114\1\13\42\0\1\13\1\0"+
    "\1\13\3\0\2\13\1\0\1\13\1\0\1\115\1\13"+
    "\1\0\1\13\1\0\1\116\1\13\42\0\1\13\1\0"+
    "\1\13\3\0\2\13\1\0\1\13\2\0\1\13\1\0"+
    "\1\13\2\0\1\13\4\0\1\117\65\0\1\120\63\0"+
    "\1\121\66\0\1\122\64\0\1\122\64\0\1\123\64\0"+
    "\1\124\25\0\1\13\1\0\1\13\3\0\2\13\1\0"+
    "\1\13\2\0\1\13\1\0\1\13\1\0\1\125\1\13"+
    "\32\0\1\60\2\0\56\60\1\0\1\60\17\0\1\126"+
    "\1\127\7\0\1\130\31\0\1\131\2\0\1\63\2\0"+
    "\57\63\20\0\1\126\1\127\7\0\1\130\32\0\1\132"+
    "\1\0\1\65\1\5\1\6\61\65\5\133\1\134\56\133"+
    "\10\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\1\135\1\0\1\13\1\0\1\13\2\0\1\13\45\0"+
    "\2\73\57\0\1\13\1\0\1\13\3\0\2\13\1\136"+
    "\1\13\2\0\1\13\1\0\1\13\2\0\1\13\65\0"+
    "\1\137\40\0\1\13\1\0\1\13\3\0\1\140\1\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\2\0\1\13"+
    "\42\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\2\0\1\13\1\141\1\13\2\0\1\13\56\0\1\142"+
    "\47\0\1\13\1\0\1\13\3\0\2\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\0\1\143\1\13\51\0"+
    "\1\144\56\0\1\123\61\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\145\1\0\1\13\2\0\1\13\1\0\1\13"+
    "\2\0\1\13\60\0\1\146\53\0\1\147\15\0\1\150"+
    "\45\0\1\151\63\0\1\152\55\0\1\13\1\0\1\13"+
    "\3\0\2\13\1\0\1\153\2\0\1\13\1\0\1\13"+
    "\2\0\1\13\62\0\1\154\60\0\1\155\65\0\1\156"+
    "\62\0\1\157\54\0\1\44\44\0\5\133\1\160\56\133"+
    "\4\0\1\6\1\134\76\0\1\161\64\0\1\162\66\0"+
    "\1\163\47\0\1\13\1\0\1\13\3\0\2\13\1\164"+
    "\1\13\2\0\1\13\1\0\1\13\2\0\1\13\53\0"+
    "\1\165\67\0\1\136\61\0\1\166\50\0\1\13\1\0"+
    "\1\13\3\0\2\13\1\167\1\13\2\0\1\13\1\0"+
    "\1\170\2\0\1\13\50\0\1\171\71\0\1\172\67\0"+
    "\1\173\43\0\1\13\1\0\1\13\3\0\2\13\1\0"+
    "\1\13\1\0\1\174\1\13\1\0\1\13\2\0\1\13"+
    "\56\0\1\162\60\0\1\175\60\0\1\176\71\0\1\177"+
    "\37\0\4\133\1\6\1\160\56\133\27\0\1\200\55\0"+
    "\1\201\61\0\1\202\62\0\1\203\101\0\1\204\37\0"+
    "\1\13\1\0\1\13\3\0\2\13\1\0\1\13\2\0"+
    "\1\13\1\0\1\13\1\205\1\0\1\13\66\0\1\206"+
    "\47\0\1\207\102\0\1\210\52\0\1\211\56\0\1\212"+
    "\71\0\1\213\52\0\1\214\76\0\1\215\70\0\1\216"+
    "\37\0\1\217\100\0\1\220\55\0\1\221\62\0\1\222"+
    "\64\0\1\223\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5148];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\10\1\1\11\24\1\1\11"+
    "\1\1\12\11\1\1\1\11\4\1\1\0\1\11\1\1"+
    "\1\11\1\0\2\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\11\2\0\1\1\1\0\1\1\4\0"+
    "\5\11\1\0\5\11\5\0\1\1\3\0\1\11\1\1"+
    "\1\0\1\11\1\0\1\11\1\0\1\1\6\0\1\11"+
    "\2\0\1\11\2\0\1\1\2\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\4\0\1\11\1\0\5\11"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder sb = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2940) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [142] { throw new Error(\"Illegal character <\"+"+ZZ_NL+"                                   yytext()+\">\"); }");
          { throw new Error("Illegal character <"+
                                   yytext()+">");
          }
        case 54: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [39] { /* ignore */ }");
          { /* ignore */
          }
        case 55: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [79] { return Parser.MUL_ARITHM; }");
          { return Parser.MUL_ARITHM;
          }
        case 56: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [100] { return Parser.STRUCT_IDENTIFIER; }");
          { return Parser.STRUCT_IDENTIFIER;
          }
        case 57: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [101] { return Parser.IDENTIFIER; }");
          { return Parser.IDENTIFIER;
          }
        case 58: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [104] { return Parser.INTEGER; }");
          { return Parser.INTEGER;
          }
        case 59: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [89] { return Parser.DOT; }");
          { return Parser.DOT;
          }
        case 60: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [83] { return Parser.ASSIGN; }");
          { return Parser.ASSIGN;
          }
        case 61: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [81] { return Parser.NOT; }");
          { return Parser.NOT;
          }
        case 62: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [80] { return Parser.MORELESS; }");
          { return Parser.MORELESS;
          }
        case 63: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [78] { return Parser.ADD_ARITHM; }");
          { return Parser.ADD_ARITHM;
          }
        case 64: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [82] { return Parser.XOR; }");
          { return Parser.XOR;
          }
        case 65: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [88] { return Parser.COMMA; }");
          { return Parser.COMMA;
          }
        case 66: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [90] { return Parser.SEMICOLON; }");
          { return Parser.SEMICOLON;
          }
        case 67: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [91] { return Parser.L_CURBRACE; }");
          { return Parser.L_CURBRACE;
          }
        case 68: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [92] { return Parser.R_CURBRACE; }");
          { return Parser.R_CURBRACE;
          }
        case 69: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [93] { return Parser.L_BRACE; }");
          { return Parser.L_BRACE;
          }
        case 70: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [94] { return Parser.R_BRACE; }");
          { return Parser.R_BRACE;
          }
        case 71: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [95] { return Parser.L_SQBRACE; }");
          { return Parser.L_SQBRACE;
          }
        case 72: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [96] { return Parser.R_SQBRACE; }");
          { return Parser.R_SQBRACE;
          }
        case 73: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [107] { sb.setLength(0); yybegin(STRING_DQUOTED); }");
          { sb.setLength(0); yybegin(STRING_DQUOTED);
          }
        case 74: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [108] { sb.setLength(0); yybegin(STRING_SQUOTED); }");
          { sb.setLength(0); yybegin(STRING_SQUOTED);
          }
        case 75: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [117] { sb.append(yytext()); }");
          { sb.append(yytext());
          }
        case 76: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [112] { yybegin(YYINITIAL); "+ZZ_NL+"                  Parser.yylval = new ParserVal(sb.toString()); "+ZZ_NL+"                  return Parser.STRING; }");
          { yybegin(YYINITIAL); 
//                  Parser.yylval = new ParserVal(sb.toString()); 
                  return Parser.STRING;
          }
        case 77: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [123] { sb.append(\'\\\\\'); }");
          { sb.append('\\');
          }
        case 78: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [69] { return Parser.POW; }");
          { return Parser.POW;
          }
        case 79: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [54] { return Parser.DO; }");
          { return Parser.DO;
          }
        case 80: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [105] { return Parser.FLOAT; }");
          { return Parser.FLOAT;
          }
        case 81: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [59] { return Parser.IF; }");
          { return Parser.IF;
          }
        case 82: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [74] { return Parser.OR; }");
          { return Parser.OR;
          }
        case 83: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [70] { return Parser.EQ; }");
          { return Parser.EQ;
          }
        case 84: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [72] { return Parser.INCR; }");
          { return Parser.INCR;
          }
        case 85: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [73] { return Parser.AND; }");
          { return Parser.AND;
          }
        case 86: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [118] { sb.append(\'\\t\'); }");
          { sb.append('\t');
          }
        case 87: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [121] { sb.append(\'\\r\'); }");
          { sb.append('\r');
          }
        case 88: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [119] { sb.append(\'\\n\'); }");
          { sb.append('\n');
          }
        case 89: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [122] { sb.append(\'\\\"\'); }");
          { sb.append('\"');
          }
        case 90: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [137] { sb.append(\'\\\'\'); }");
          { sb.append('\'');
          }
        case 91: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [52] { return Parser.FOR; }");
          { return Parser.FOR;
          }
        case 92: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [106] { return Parser.BOOLEAN; }");
          { return Parser.BOOLEAN;
          }
        case 93: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [60] { return Parser.ELSE; }");
          { return Parser.ELSE;
          }
        case 94: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [56] { return Parser.GOTO; }");
          { return Parser.GOTO;
          }
        case 95: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [62] { return Parser.CASE; }");
          { /*return Parser.CASE;*/
          }
        case 96: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [63] { return Parser.DEFUN; }");
          { return Parser.DEFUN;
          }
        case 97: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [47] { return Parser.TUPLE; }");
          { /* return Parser.TUPLE;*/
          }
        case 98: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [57] { return Parser.BREAK; }");
          { return Parser.BREAK;
          }
        case 99: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [53] { return Parser.WHILE; }");
          { return Parser.WHILE;
          }
        case 100: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [55] { return Parser.RETURN; }");
          { return Parser.RETURN;
          }
        case 101: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [48] { return Parser.STRUCT; }");
          { return Parser.STRUCT;
          }
        case 102: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [45] { return Parser.STRING; }");
          { return Parser.STRING;
          }
        case 103: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [61] { return Parser.SWITCH; }");
          { return Parser.SWITCH;
          }
        case 104: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [64] { return Parser.INCLUDE; }");
          { /*return Parser.INCLUDE;*/ 
          }
        case 105: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [58] { return Parser.CONTINUE; }");
          { return Parser.CONTINUE;
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
